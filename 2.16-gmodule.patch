--- origsrc/glib-2.16.5/configure.in	2008-07-19 21:34:02.000000000 -0500
+++ src/glib-2.16.5/configure.in	2008-07-22 18:05:16.265625000 -0500
@@ -1296,7 +1296,15 @@
 dnl *** force native WIN32 shared lib loader 
 if test -z "$G_MODULE_IMPL"; then
   case "$host" in
-  *-*-mingw*|*-*-cygwin*) G_MODULE_IMPL=G_MODULE_IMPL_WIN32 ;;
+  *-*-mingw*) G_MODULE_IMPL=G_MODULE_IMPL_WIN32
+  ;;
+  esac
+fi
+dnl *** force Cygwin hybrid dl/win32 shared lib loader 
+if test -z "$G_MODULE_IMPL"; then
+  case "$host" in
+  *-*-cygwin*) G_MODULE_IMPL=G_MODULE_IMPL_CYGWIN
+  ;;
   esac
 fi
 dnl *** force native AIX library loader
@@ -2514,9 +2522,6 @@
 dnl **********************
 
 case $host in
-  *-*-cygwin*)
-	G_LIBS_EXTRA="-luser32 -lkernel32"
-    ;;
   *-*-mingw*)
 	G_LIBS_EXTRA="-lws2_32 -lole32"
     ;;
--- origsrc/glib-2.16.5/gmodule/Makefile.am	2008-07-01 17:30:05.000000000 -0500
+++ src/glib-2.16.5/gmodule/Makefile.am	2008-07-22 18:05:16.281250000 -0500
@@ -17,6 +17,7 @@
 		gmodule-dld.c		\
 		gmodule-dyld.c		\
 		gmodule-os2.c		\
+		gmodule-cygwin.c	\
 		gmodule-win32.c		\
 		gmodule-beos.c		\
 		gmodule-ar.c		\
--- origsrc/glib-2.16.5/gmodule/gmodule-cygwin.c	1969-12-31 18:00:00.000000000 -0600
+++ src/glib-2.16.5/gmodule/gmodule-cygwin.c	2008-07-22 18:05:16.281250000 -0500
@@ -0,0 +1,250 @@
+/* GMODULE - GLIB wrapper code for dynamic module loading
+ * Copyright (C) 1998, 2000 Tim Janik
+ *
+ * Win32 GMODULE implementation
+ * Copyright (C) 1998 Tor Lillqvist
+ *
+ * Cygwin GMODULE implementation
+ * Copyright (C) 2007 Yaakov Selkowitz
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+/*
+ * Modified by the GLib Team and others 1997-2007.  See the AUTHORS
+ * file for a list of people on the GLib Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GLib at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+/*
+ * MT safe
+ */
+#include "config.h"
+
+#include <dlfcn.h>
+#include <stdio.h>
+#include <windows.h>
+#include <tlhelp32.h>
+
+/* --- win32 functions --- */
+static gpointer
+find_in_any_module_using_toolhelp (const gchar *symbol_name)
+{
+  typedef HANDLE (WINAPI *PFNCREATETOOLHELP32SNAPSHOT)(DWORD, DWORD);
+  static PFNCREATETOOLHELP32SNAPSHOT pfnCreateToolhelp32Snapshot = NULL;
+
+  typedef BOOL (WINAPI *PFNMODULE32FIRST)(HANDLE, MODULEENTRY32*);
+  static PFNMODULE32FIRST pfnModule32First= NULL;
+
+  typedef BOOL (WINAPI *PFNMODULE32NEXT)(HANDLE, MODULEENTRY32*);
+  static PFNMODULE32NEXT pfnModule32Next = NULL;
+
+  static HMODULE kernel32;
+
+  HANDLE snapshot;
+  MODULEENTRY32 me32;
+
+  gpointer p;
+
+  if (!pfnCreateToolhelp32Snapshot || !pfnModule32First || !pfnModule32Next)
+    {
+      if (!kernel32)
+	if (!(kernel32 = GetModuleHandle ("kernel32.dll")))
+	  return NULL;
+
+      if (!(pfnCreateToolhelp32Snapshot = (PFNCREATETOOLHELP32SNAPSHOT) GetProcAddress (kernel32, "CreateToolhelp32Snapshot"))
+	  || !(pfnModule32First = (PFNMODULE32FIRST) GetProcAddress (kernel32, "Module32First"))
+	  || !(pfnModule32Next = (PFNMODULE32NEXT) GetProcAddress (kernel32, "Module32Next")))
+	return NULL;
+    }
+
+  if ((snapshot = (*pfnCreateToolhelp32Snapshot) (TH32CS_SNAPMODULE, 0)) == (HANDLE) -1)
+    return NULL;
+
+  me32.dwSize = sizeof (me32);
+  p = NULL;
+  if ((*pfnModule32First) (snapshot, &me32))
+    {
+      do {
+	if ((p = GetProcAddress (me32.hModule, symbol_name)) != NULL)
+	  break;
+      } while ((*pfnModule32Next) (snapshot, &me32));
+    }
+
+  CloseHandle (snapshot);
+
+  return p;
+}
+
+static gpointer
+find_in_any_module_using_psapi (const gchar *symbol_name)
+{
+  static HMODULE psapi = NULL;
+
+  typedef BOOL (WINAPI *PFNENUMPROCESSMODULES) (HANDLE, HMODULE *, DWORD, LPDWORD) ;
+  static PFNENUMPROCESSMODULES pfnEnumProcessModules = NULL;
+
+  HMODULE *modules;
+  HMODULE dummy;
+  gint i, size;
+  DWORD needed;
+
+  gpointer p;
+
+  if (!pfnEnumProcessModules)
+    {
+      if (!psapi)
+	if ((psapi = LoadLibrary ("psapi.dll")) == NULL)
+	  return NULL;
+
+      if (!(pfnEnumProcessModules = (PFNENUMPROCESSMODULES) GetProcAddress (psapi, "EnumProcessModules")))
+	return NULL;
+    }
+
+  if (!(*pfnEnumProcessModules) (GetCurrentProcess (), &dummy,
+				 sizeof (HMODULE), &needed))
+    return NULL;
+
+  size = needed + 10 * sizeof (HMODULE);
+  modules = g_malloc (size);
+
+  if (!(*pfnEnumProcessModules) (GetCurrentProcess (), modules,
+				 size, &needed)
+      || needed > size)
+    {
+      g_free (modules);
+      return NULL;
+    }
+
+  p = NULL;
+  for (i = 0; i < needed / sizeof (HMODULE); i++)
+    if ((p = GetProcAddress (modules[i], symbol_name)) != NULL)
+      break;
+
+  g_free (modules);
+
+  return p;
+}
+
+static gpointer
+find_in_any_module (const gchar *symbol_name)
+{
+  gpointer result;
+
+  if ((result = find_in_any_module_using_toolhelp (symbol_name)) == NULL
+      && (result = find_in_any_module_using_psapi (symbol_name)) == NULL)
+    return NULL;
+  else
+    return result;
+}
+
+/* --- dl functions --- */
+static gchar*
+fetch_dlerror (gboolean replace_null)
+{
+  gchar *msg = dlerror ();
+
+  /* make sure we always return an error message != NULL, if
+   * expected to do so. */
+
+  if (!msg && replace_null)
+    return "unknown dl-error";
+
+  return msg;
+}
+
+static gpointer
+_g_module_open (const gchar *file_name,
+		gboolean     bind_lazy,
+		gboolean     bind_local)
+{
+  gpointer handle;
+  
+  handle = dlopen (file_name,
+		   (bind_local ? 0 : RTLD_GLOBAL) | (bind_lazy ? RTLD_LAZY : RTLD_NOW));
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+  
+  return handle;
+}
+
+static gpointer
+_g_module_self (void)
+{
+  gpointer handle;
+  
+  /* to query symbols from the program itself, special link options
+   * are required on some systems.
+   */
+  
+  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+  
+  return handle;
+}
+
+static void
+_g_module_close (gpointer handle,
+		 gboolean is_unref)
+{
+  /* are there any systems out there that have dlopen()/dlclose()
+   * without a reference count implementation?
+   */
+  is_unref |= 1;
+  
+  if (is_unref)
+    {
+      if (dlclose (handle) != 0)
+	g_module_set_error (fetch_dlerror (TRUE));
+    }
+}
+
+static gpointer
+_g_module_symbol (gpointer     handle,
+		  const gchar *symbol_name)
+{
+  gpointer p;
+
+  p = dlsym (handle, symbol_name);
+  if (!p)
+	p = find_in_any_module (symbol_name);
+  if (!p)
+    g_module_set_error (fetch_dlerror (FALSE));
+
+  return p;
+}
+
+static gchar*
+_g_module_build_path (const gchar *directory,
+		      const gchar *module_name)
+{
+  if (directory && *directory) {
+    if (g_str_has_suffix (module_name, "." G_MODULE_SUFFIX) == TRUE || g_strrstr (module_name, "." G_MODULE_SUFFIX ".") != NULL)
+      return g_strconcat (directory, "/", module_name, NULL);
+    else if (g_str_has_prefix (module_name, "cyg") == TRUE)
+      return g_strconcat (directory, "/", module_name, "." G_MODULE_SUFFIX, NULL);
+    else
+      return g_strconcat (directory, "/cyg", module_name, "." G_MODULE_SUFFIX, NULL);
+  }
+  else if (g_str_has_suffix (module_name, "." G_MODULE_SUFFIX) == TRUE || g_strrstr (module_name, "." G_MODULE_SUFFIX ".") != NULL)
+    return g_strconcat (module_name, NULL);
+  else if (g_str_has_prefix (module_name, "cyg") == TRUE)
+    return g_strconcat (module_name, "." G_MODULE_SUFFIX, NULL);
+  else
+    return g_strconcat ("cyg", module_name, "." G_MODULE_SUFFIX, NULL);
+}
--- origsrc/glib-2.16.5/gmodule/gmodule-win32.c	2008-07-01 17:30:05.000000000 -0500
+++ src/glib-2.16.5/gmodule/gmodule-win32.c	2008-07-22 18:05:16.296875000 -0500
@@ -37,10 +37,6 @@
 
 #include <tlhelp32.h>
 
-#ifdef G_WITH_CYGWIN
-#include <sys/cygwin.h>
-#endif
-
 static void
 set_error (void)
 {
@@ -58,12 +54,6 @@
 {
   HINSTANCE handle;
   wchar_t *wfilename;
-#ifdef G_WITH_CYGWIN
-  gchar tmp[MAX_PATH];
-
-  cygwin_conv_to_win32_path(file_name, tmp);
-  file_name = tmp;
-#endif
   wfilename = g_utf8_to_utf16 (file_name, -1, NULL, NULL, NULL);
 
   handle = LoadLibraryW (wfilename);
@@ -235,28 +225,14 @@
   if (directory && *directory)
     if (k > 4 && g_ascii_strcasecmp (module_name + k - 4, ".dll") == 0)
       return g_strconcat (directory, G_DIR_SEPARATOR_S, module_name, NULL);
-#ifdef G_WITH_CYGWIN
-    else if (strncmp (module_name, "lib", 3) == 0 || strncmp (module_name, "cyg", 3) == 0)
-      return g_strconcat (directory, G_DIR_SEPARATOR_S, module_name, ".dll", NULL);
-    else
-      return g_strconcat (directory, G_DIR_SEPARATOR_S, "cyg", module_name, ".dll", NULL);
-#else
     else if (strncmp (module_name, "lib", 3) == 0)
       return g_strconcat (directory, G_DIR_SEPARATOR_S, module_name, ".dll", NULL);
     else
       return g_strconcat (directory, G_DIR_SEPARATOR_S, "lib", module_name, ".dll", NULL);
-#endif
   else if (k > 4 && g_ascii_strcasecmp (module_name + k - 4, ".dll") == 0)
     return g_strdup (module_name);
-#ifdef G_WITH_CYGWIN
-  else if (strncmp (module_name, "lib", 3) == 0 || strncmp (module_name, "cyg", 3) == 0)
-    return g_strconcat (module_name, ".dll", NULL);
-  else
-    return g_strconcat ("cyg", module_name, ".dll", NULL);
-#else
   else if (strncmp (module_name, "lib", 3) == 0)
     return g_strconcat (module_name, ".dll", NULL);
   else
     return g_strconcat ("lib", module_name, ".dll", NULL);
-#endif
 }
--- origsrc/glib-2.16.5/gmodule/gmodule.c	2008-07-01 17:30:05.000000000 -0500
+++ src/glib-2.16.5/gmodule/gmodule.c	2008-07-22 18:05:16.296875000 -0500
@@ -151,6 +151,8 @@
 #include "gmodule-dl.c"
 #elif	(G_MODULE_IMPL == G_MODULE_IMPL_DLD)
 #include "gmodule-dld.c"
+#elif	(G_MODULE_IMPL == G_MODULE_IMPL_CYGWIN)
+#include "gmodule-cygwin.c"
 #elif	(G_MODULE_IMPL == G_MODULE_IMPL_WIN32)
 #include "gmodule-win32.c"
 #elif	(G_MODULE_IMPL == G_MODULE_IMPL_DYLD)
